name: .NET

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      solutionPath: ./Source/Sundew.Generator.sln
      repository: 'https://sundew-dev:${{ secrets.SUNDEW_DEV_TOKEN }}@github.com/hugener/Sundew.Generator.git'
      source: 'https://api.nuget.org/v3/index.json'
      dev-source: 'https://www.myget.org/F/sundew-dev/api/v2/package'
      dev-source-latest-version: 'https://www.myget.org/F/sundew-dev/api/v3/index.json'
      dev-symbols-source: 'https://www.myget.org/F/sundew-dev/api/v3/index.json'
      package-versions: 'logs/packages.pkgver'
      source-package-versions: './Source/logs/packages.pkgver'
      packages-to-push: 'logs/packages.push'
      source-packages-to-push: './Source/logs/packages.push'
    steps:
    - name: 'Await other builds'
      uses: softprops/turnstyle@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Build setup
      id: build-setup
      run: >
        dotnet tool update Sundew.Packaging.Tool -g

        dotnet tool update CommandlineBatcher -g

        cb match --patterns
        "refs/heads/(?:master|main).* => stage=production|buildConfiguration=Release"
        "refs/heads/release/.+ => stage=ci|buildConfiguration=Debug|dev-package-source-if-set= -s ${{ env.dev-source-latest-version }}"
        "refs/heads/(?:develop.*|feature/(?<Postfix>.+)|bugfix/(?<Postfix>.+)) => stage=development|buildConfiguration=Debug|package-postfix={Postfix}|dev-package-source-if-set= -s ${{ env.dev-source-latest-version }}"
        ".+ => stage=none|buildConfiguration=Release"
        --format "::set-output name={0}::{1}"
        -bvs '='
        --input ${{ github.ref }}
    - name: Restore
      run: dotnet restore ${{ env.solutionPath }} --verbosity normal -s ${{ env.source }}${{ steps.build-setup.outputs.dev-package-source-if-set }}
    - name: Build
      id: build
      run: >
        dotnet build ${{ env.solutionPath }} --verbosity normal --configuration ${{ steps.build-setup.outputs.buildConfiguration }} --no-restore
        -p:"SppSourceName=${{ steps.build-setup.outputs.stage }}"
        '-p:"SppProductionSource=production => ${{ env.source }}|${{ env.source }}"'
        '-p:"SppIntegrationSource=ci => ${{ env.source }}|${{ env.source }}"'
        '-p:"SppDevelopmentSource=development => ${{ secrets.SPP_DEVELOPMENT_API_KEY }}@${{ env.dev-source }} {${{ env.dev-source-latest-version }}}|${{ secrets.SPP_DEVELOPMENT_API_KEY }}@${{ env.dev-symbols-source }}"'
        -p:"SppAllowLocalSource=false"
        -p:"SppEnablePublish=false"
        '-p:"SppAppendPublishFileLogFormats={0},{1},{3},{6}  > ${{ env.package-versions }}|{11}{2}{11},{11}{4}{11},{5}{12} > ${{ env.packages-to-push }}|{11}{7}{11},{11}{8}{11},{9}{12} > ${{ env.packages-to-push }}"'
        -p:"SppApiKey=${{ secrets.SPP_API_KEY }}"
        -p:"SppSymbolApiKey=${{ secrets.SPP_API_KEY }}"
        -p:"ContinuousIntegrationBuild=true"
        -p:"SppForceVersion=${{ secrets.SPP_FORCE_VERSION_IF_SET }}"
        -p:"SppPrereleasePostfix=${{ steps.build-setup.outputs.package-postfix }}"
    - name: Test
      run: dotnet test ${{ env.solutionPath }} --verbosity normal --configuration ${{ steps.build-setup.outputs.buildConfiguration }} --no-build
    - name: 'Publish package(s)'
      run: cb -c "dotnet|nuget push {0} -s {1} -k {2} -n true" -bs NewLine -bvs ',' -bf ${{ env.source-packages-to-push }}
    - name: Cleanup
      run: spt delete -v ${{ env.source-packages-to-push }}
    - name: 'Tag stable version'
      if: ${{ success() && steps.build-setup.outputs.stage == 'production' }}
      run: |
        git config user.email "sundew-dev@outlook.com"
        git config user.name "sundew-build"
        cb -c "git|tag -a {1}-{0} -m "{1}-{0}"" "git|push ${{ env.repository }} {1}-{0}" -bvs ',' -bf ${{ env.source-package-versions }}
    - name: 'Await stable package publish'
      if: ${{ success() && steps.build-setup.outputs.stage == 'production' }}
      run: cb -c "spt|await -s {3} {0}.{1}" -bvs ',' -bf ${{ env.source-package-versions }}
